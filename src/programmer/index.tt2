[% PROCESS header %]

<h3>OneRNG Programmer/Serial Board</h3>
<h4>Change list</h4>
<ul>
<li>28th Mar 2015 - Converted to OneRNG version
<li>2nd Oct 2013 - Created
</ul>
<h4>Contents</h4>
<ul>
<li><a href="#intro">Introduction</a>
<li><a href="#connect">Hooking up Hardware</a>
<li><a href="#build">Downloading a build system</a>
<li><a href="#source">Downloading starting source</a>
<li><a href="#gui">Building the Programmer GUI App</a>
<li><a href="#using">Using the Programmer GUI App</a>
<li><a href="#load">Loading code</a>
<li><a href="#update">Updating the Programmer's Firmware</a>
<li><a href="#downloads">Downloads</a>
<li><a href="#credits">Credits</a>
</ul>

<a name="intro"><h4>Introduction</h4></a>

<p>Our programmer is a simple, cheap USB board</p>

<a href="/pic/PRG-V9-dev_prog2.html"><img src="/pic/PRG-V9-dev_prog2.jpg" width="400"></a>

<p>The only difference between this version of the prgrammer and <a href="http://www.moonbaseotago.com/cheaprf/programmer1/programmer1.html">our previous one</a> is that we've replaced the cheap, unrealiable USB connector with a more reliable one.</p>

<p>By default at power on it simply works as a serial connection, an escape sequence generated by the GUI software gets it into CC25xx programmer mode which changes the functional pinout:</p>

<a href="/pic/PRG-V9-serial.html"><img src="/pic/PRG-V9-serial.png" width="400"></a>

<a name="connect"><h4>Hooking up Hardware</h4></a>

<p>The basic connector is a 3x2 header and either a ribbon cable or a 6-pin TAB-Connect cable and pin header. To program a OneRNG you need a 6-pin TAB-Connect cable - this is incuded in the Kickstarter programmer kit</p>

<a href="/pic/PRG-V9-cable2.html"><img src="/pic/PRG-V9-cable2.jpg" width="400"></a>


<p>Connect the cable to the 6 pin cable header shown below:</p>

<p>Make sure that the cable is connected to the board the right way around - pin 1 on the cable, the side with the red stripe goes to pin 1 on the programmer.</p>

<a href="/pic/PRG-V9-xcable.html"><img src="/pic/PRG-V9-xcable.jpg" width="400"></a>

<p>By default the programmer will power any board that it's connected to - so ALWAYS remove your OneRNG from your computer before programming it, not doing that can damage the programmer or the OneRNG</p>

</p>While most OneRNG users are unlikely to need this if for some reason you want to power your OneRNG from some other source you can disable this - on the bottom of the board under the area labelled "power jumper" above there is a trace between those two pins - use a modelling knife to carefully cut that trace to disconnect the power to the cable - if you like you can install a 2-pin header (not included)  in the two holes there and then install a jumper so you can enable and disable power to the cable at will.</p>

<a name="build"><h4>Downloading a build system</h4></a>

<p>We use <a href="http://sdcc.sourceforge.net/">SDCC</a> as the C compiler and assembler in our build system - we provide a copy of the source we build from under Linux at <a href="http://moonbaseotago.com/cheaprf/sdcc-2533.tar.gz">http://moonbaseotago.com/cheaprf/sdcc-2533.tar.gz</a>. This version adds an extra machine specific include file for the cc2533 and some minor tweaks to enable use of the second data pointer register.</p>

<ul>
<li>Linux: for linux users unpack this file, a simple "make install" from the top level may be all you need to do. If run into problems try "make clean;make install". Make sure that sdcc is included in your PATH (/usr/local/bin)
<li>Macs: we have no specific mac instructions - if you have problems please get in touch, if you fix problems also let us know how you got things working so we can update this document
<li>Windows: we have no specific windows instructions - if you have problems please get in touch, if you fix problems also let us know how you got things working so we can update this document
</ul>

<a name="source"><h4>Downloading starting source</h4></a>

<p>Our source is stored on GitHub at <a href="https://github.com/OneRNG/firmware">https://github.com/OneRNG/firmware</a> grab a copy and install the source tree on your system.</p>

<p>It's based on the CC cheaprf system - source is available here: <a href="https://github.com/MoonbaseOtago/CC-System">https://github.com/MoonbaseOtago/CC-System</a> the OneRNG code has the RF portions removed and a hook in the main idle loop for collecting entropy. A detailed document on programming in this environment is <a href="http://www.moonbaseotago.com/cheaprf/programming.html">available here</a>. In particular it covers tasks and timers which are used extensively in the OneRNG source code.</p>


<a name="gui"><h4>Building the Programmer GUI App</h4></a>

<p>The programmer is intended to be used with the programmer GUI 'ccload'</p>

<p>To download and build the GUI app for programming - grab a copy from GitHub: <a href="https://github.com/MoonbaseOtago/CCLoad">https://github.com/MoonbaseOtago/CCLoad</a></p>

<p>Building this app needs C++ and the QT4 (not QT5) libraries.</p>

<ul>
<li>Linux: simply type "make" at the top level
<li>Macs: we have no specific mac instructions - if you have problems please get in touch, if you fix problems also lets us know how you got things working so we can update this document
<li>Windows: we have no specific windows instructions - if you have problems please get in touch, if you fix problems also lets us know how you got things working so we can update this document
</ul>

<a name="using"><h4>Using the Programmer GUI App</h4></a>
<p>Run the app from src/ccload</p>

<p>You should see something like:</p>
<img src="/pic/PRG-V9-s1.png" width="800">

<p>Now attach an 6-pin programming cable to your programmer and plug the other end into the programming connector under the OneRNG, you may have to remove the sticky label over the  - you have to push it in and hold it while you are programming, push hard enough so that you feel the pogo-pins retract.</p>

<a href="/pic/PRG-V9-cable.html"><img src="/pic/PRG-V9-cable.jpg" width="800"></a>

<p>Plug the board into your computer and determine which device it's attached to:</p>
<ul>
<li>Linux: type 'dmesg' to see which serial device was allocated to you - if you have no other devices connected chances are it will be /dev/ttyACM0 - it will have a similar name (might be ttyACM1, ttyACM2, etc)
<li>Mac: ???
<li>Windows: ???
</ul>

<p>Type the name of the device you want to use into the "Serial" text box half way down the panel on the left hand side - the program will remember it next time. Press the "Connect" button, you should see the panel change to look like the following panel, if the name on the button doesn't change to 'Disconnect' it hasn't found the device, you may have typed the wrong device name.</p>

<img src="/pic/PRG-V9-s2.png" width="800">

<p>Note that the 'Connect' button has changed to 'Disconnect', the 'Chip' panel in the top right contains information about the chip found on the development board, the CC Status Byte tells you the development system's current state</p>

<p>In the programming GUI there are two sets of boxes for loading code - one for loading kernels and standalone apps and one for .loading SUOTA applications - for this example we're only using the one labelled "Read/Write Kernel/Standalone App"</p>

<p>Now's a good time to set up automatic MAC generation - check the "Write MAC" box, next to it are 2 text boxes put 8 hex digits into each box, check the "AutoincMAC" box, now every time you write a kernel it will get a unique MAC address assigned to the board. How should you find a unique MAC address to use - I steal one from an existing device that works in another domain: ethernet or wifi - put the first 8 hex digits of your laptop's ethernet mac address into the left hand box, and the last 4 hex digits, followed by "0000" into the right hand box.</p>

<a name="load"><h4>Loading Code</h4></a>

<p>Press the "Select File" button, it will pop up a file open dialog box, navigate to the place you built the OneRNG formware and choose the ihx file. Then press the "load" button to load the file into the GUI program - it will look something like:</p>
<img src="/pic/PRG-V9-s3.png" width="800">

<p>Next press "Erase Chip" to delete any already loaded applications and "Write" to copy the kernel image into the development board - normally we don't check "Verify After Write", it takes too long, only use it if you suspect a problem.</p>

<img src="/pic/PRG-V9-s4.png" width="800">

<p>Notes:</p>
<ul>
<li>The "Read/Write SUOTA Application" is not used for OneRNG programming</li>
<li>Always disable the 'Write MAC' check box</li>
<li>Leave "Interface" set to "Production"</li>
<li>When you're done you can click "Run" to start the program</li>
</ul>


<a name="update"><h4>Updating the Programmer's Firmware</h4></a>

<p>The programmer's firmware source is <a href="https://github.com/MoonbaseOtago/HBase">available on Github</a>.</p>

<p>Normally you shouldn't need to load your own firmware but if you want to play go ahead - to program your own firmware you'll need to load the <a href="http://dfu-programmer.sourceforge.net/">dfu-programmer</a> application (Linux users will likely find it already available to them from their existing repositories).</p>

<p>To load new code you first need to put the board into the firmware loading  mode:</p>

<a href="/pic/PRG-V9-reset.html"><img src="/pic/PRG-V9-reset.jpg" width="400"></a>

<p>Plug your programmer into a USB port, short the two 'D7' pins on the board, then short the two 'Reset' pins (I use two pairs of fine tweezers to do this) - the board is now in firmware reload mode, remove the reset short, taking care to keep the board powered on.  Once you've done this you need to erase the programmer's CPU:</p>

<pre>

	dfu-programmer at90usb162 erase

</pre>

<p> Then program it with new code using the command:<a/>

<pre>

	dfu-programmer at90usb162 flash Benito7g.hex

</pre>

<p>Now unplug your programmer and plug it back in, it will come up with the new firmware.</p>

<a name="downloads"><h4>Downloads</h4></a>

<p>Software and hardware designs can be downloaded from here:</p>
<ul>
<li><a href="https://github.com/MoonbaseOtago/HBase">Firmware source</a>
<li><a href="/pic/PRG-V9-prog-schm.png">Schematic</a>
<li><a href="/sw/programmer9.0.sch">programmer9.0.sch</a> Eagle schematic
<li><a href="/sw/programmer9.0.brd">programmer9.0.brd</a> Eagle layout
</ul>

<a name="credits"><h4>Credits</h4></a>
<p>No one does this alone, the great thing about open source is that we all get to stand on the shoulders of giants</p>
<ul>
<li>We use the SDCC 8051 C compiler, assembler and linker - many thanks.</li>
<li>The USB to serial portion of the USB programmer/serial dongle was copied from the excellent Benito project - thanks for sharing!</li>
<li>We based our programming GUI loosely on CC.Flash from <a href="https://github.com/x893/CC.Flash">https://github.com/x893/CC.Flash</a> - thanks</li>
</ul>

[% INCLUDE footer %]
